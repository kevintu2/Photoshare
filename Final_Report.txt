Kevin Tu and James Chen
CS460
Prof. Kollios
March 16th, 2021

Final Report for Photoshare


Schema:

CREATE DATABASE IF NOT EXISTS photoshare;
USE photoshare;

CREATE TABLE Users(
 user_id INTEGER AUTO_INCREMENT,
 first_name VARCHAR(100),
 last_name VARCHAR(100),
 email VARCHAR(100),
 birth_date DATE,
 hometown VARCHAR(100),
 gender VARCHAR(100),
 password VARCHAR(100) NOT NULL,
 PRIMARY KEY (user_id)
 );

 CREATE TABLE Friends(
 user_id1 INTEGER,
 user_id2 INTEGER,
 PRIMARY KEY (user_id1, user_id2),
 FOREIGN KEY (user_id1)
 REFERENCES Users(user_id),
 FOREIGN KEY (user_id2)
 REFERENCES Users(user_id)
);

CREATE TABLE Albums(
 albums_id INTEGER NOT NULL AUTO_INCREMENT,
 name VARCHAR(100),
 date DATE,
 user_id INTEGER NOT NULL,
 PRIMARY KEY (albums_id),
 FOREIGN KEY (user_id)
 REFERENCES Users(user_id)

);

CREATE TABLE Tags(
 tag_id INTEGER AUTO_INCREMENT,
 name VARCHAR(100),
 PRIMARY KEY (tag_id)
);

CREATE TABLE Photos(
 photo_id INTEGER AUTO_INCREMENT,
 caption VARCHAR(100),
 data LONGBLOB,
 albums_id INTEGER NOT NULL,
 user_id INTEGER NOT NULL,
 PRIMARY KEY (photo_id, albums_id),
 FOREIGN KEY (albums_id) REFERENCES Albums (albums_id) ON DELETE CASCADE,
 FOREIGN KEY (user_id) REFERENCES Users (user_id)
);

CREATE TABLE Tagged(
 photo_id INTEGER,
 tag_id INTEGER,
 PRIMARY KEY (photo_id, tag_id),
 FOREIGN KEY(photo_id)
 REFERENCES Photos (photo_id) ON DELETE CASCADE,
 FOREIGN KEY(tag_id)
 REFERENCES Tags (tag_id)
);

CREATE TABLE Comments(
 comment_id INTEGER AUTO_INCREMENT,
 user_id INTEGER DEFAULT NULL,
 photo_id INTEGER NOT NULL,
 text VARCHAR (100),
 date DATE,
 PRIMARY KEY (comment_id),
 FOREIGN KEY (user_id)
 REFERENCES Users (user_id),
 FOREIGN KEY (photo_id)
 REFERENCES Photos (photo_id)
);

CREATE TABLE Likes(
 photo_id INTEGER,
 user_id INTEGER,
 PRIMARY KEY (photo_id,user_id),
 FOREIGN KEY (photo_id)
 REFERENCES Photos (photo_id),
 FOREIGN KEY (user_id)
 REFERENCES Users (user_id)
);



Constraints and assumptions:
We assume that the user will fill in the date field in the register form with the format of yyyy-mm-dd
We assume that when you add a friend, the friend does not need to add you back for the friendship to be valid. Meaning that the user will have the added friend in their friends list, but the added friend will not have it in their friends list. They are still friends though.
Users are unable to add to albums that are not their own albums. They can only add to the ones they created.
We assume that when inputting tags the user will format the tags by separating with a whitespace. 
If an anonymous user comments on a photo, the comment will have a user_id of NULL
When a user uploads a photo, they must have created at least one album beforehand in order to upload the photo.
We assume that a user can not like a photo twice.
We assume that any user can not upload the same photo with the same caption, album into the database if it already exists in the database. Even when they have not uploaded that photo yet because that would be stealing content!
We assume that users are able to create an album with the same name that another user has made.
We assume users can not delete tags when you create them
We assume that when a user deletes an album all the photos will delete too
We assume that when a user deletes all photos from an album the album still exists
We assume that when you delete a photo the tag you tagged the photo with still exists
Only the user that uploaded the photo can delete the photo and album
We assume that you can not delete comments
We assume that you can not unlike a photo


